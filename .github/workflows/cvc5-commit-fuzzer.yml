name: CVC5 Commit Fuzzer

on:
  workflow_dispatch:

jobs:
  commit-fuzzer:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.extract-tests.outputs.matrix }}
      total_tests: ${{ steps.extract-tests.outputs.total_tests }}
      total_jobs: ${{ steps.extract-tests.outputs.total_jobs }}
    permissions:
      actions: read
      contents: read
    
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      
      - name: Install LLVM/Clang 17
        uses: KyleMayes/install-llvm-action@v2
        with:
          version: '17'

      - name: Add LLVM to PATH
        run: echo "${{ env.LLVM_PATH }}/bin" >> $GITHUB_PATH

      - name: Export LIBCLANG_PATH
        run: echo "LIBCLANG_PATH=${{ env.LLVM_PATH }}/lib" >> $GITHUB_ENV

      - name: Install system development packages
        run: |
          echo "Installing essential development packages..."
          sudo apt-get update
          
          # Install ONLY GCC 14 and essential packages (remove conflicting versions)
          sudo apt-get install -y \
            build-essential \
            libc6-dev \
            gcc \
            g++ \
            binutils \
            libstdc++-14-dev \
            libc++-dev \
            libc++abi-dev \
            zlib1g \
            zlib1g-dev
          
          echo "Installation completed"
      
      - name: Install Python dependencies
        run: |
          pip install gitpython unidiff "libclang==17.0.6"

      - name: Build cvc5 with coverage
        run: |
          # Set environment variables to ensure clang uses GCC 14 toolchain
          export CXX="clang++ --gcc-toolchain=/usr"
          export CC="clang --gcc-toolchain=/usr"
          ./scripts/cvc5/build.sh --coverage
      
      - name: Download coverage map
        uses: dawidd6/action-download-artifact@v6
        with:
          name: coverage-mapping
          path: .
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow: cvc5-coverage-mapper.yml
      
      - name: Extract coverage map
        run: |
          gunzip coverage_mapping.json.gz
          ls -la coverage_mapping.json

      - name: Run Commit Fuzzer and create matrix
        id: extract-tests
        working-directory: cvc5
        env:
          SKIP_COVERAGE_ENFORCEMENT: "true"
        run: |
          # Run commit fuzzer with matrix output (1 commit instead of 50)
          # Create matrix with 4 tests per job, max 20 jobs (80 tests total)
          ${{ github.workspace }}/scripts/cvc5/commit_fuzzer/run_commit_fuzzer.sh \
            --python-script ${{ github.workspace }}/scripts/cvc5/commit_fuzzer/commit_fuzzer.py \
            --coverage-file ../coverage_mapping.json \
            --compile-commands build \
            --output-matrix fuzzer_matrix.json \
            --tests-per-job 4 \
            --max-jobs 20 \
            1
          
          if [ ! -f "fuzzer_matrix.json" ]; then
            echo "No matrix file created, setting empty outputs"
            echo "matrix={\"include\":[]}" >> $GITHUB_OUTPUT
            echo "total_tests=0" >> $GITHUB_OUTPUT
            echo "total_jobs=0" >> $GITHUB_OUTPUT
            echo "No matrix file created, ending job"
            exit 0
          fi
          
          # Read matrix data and output to GitHub Actions
          MATRIX=$(jq -c '.matrix' fuzzer_matrix.json)
          TOTAL_TESTS=$(jq -r '.total_tests' fuzzer_matrix.json)
          TOTAL_JOBS=$(jq -r '.total_jobs' fuzzer_matrix.json)
          
          echo "DEBUG: MATRIX=$MATRIX"
          echo "DEBUG: TOTAL_TESTS=$TOTAL_TESTS"
          echo "DEBUG: TOTAL_JOBS=$TOTAL_JOBS"
          
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
          echo "total_tests=$TOTAL_TESTS" >> $GITHUB_OUTPUT
          echo "total_jobs=$TOTAL_JOBS" >> $GITHUB_OUTPUT
          
          echo "Matrix created with $TOTAL_JOBS jobs for $TOTAL_TESTS tests"
          echo "Outputs set successfully"
          
          # Ensure job succeeds even if there are issues
          echo "Commit fuzzer job completed successfully"

  fuzzer-jobs:
    needs: commit-fuzzer
    if: needs.commit-fuzzer.result == 'success' && needs.commit-fuzzer.outputs.total_tests != '' && needs.commit-fuzzer.outputs.total_tests != '0'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.commit-fuzzer.outputs.matrix) }}
    permissions:
      actions: read
      contents: read
    
    steps:
      - name: Debug matrix values
        run: |
          echo "DEBUG: total_tests from previous job: '${{ needs.commit-fuzzer.outputs.total_tests }}'"
          echo "DEBUG: matrix from previous job: '${{ needs.commit-fuzzer.outputs.matrix }}'"
          echo "DEBUG: total_jobs from previous job: '${{ needs.commit-fuzzer.outputs.total_jobs }}'"
      
      - name: Checkout
        uses: actions/checkout@v5
      
      - name: Install fuzzing dependencies
        run: |
          pip install yinyang
          pip install z3-solver

      - name: Build cvc5
        run: |
          ./scripts/cvc5/build.sh --coverage

      - name: Run Fuzzer on assigned tests (4 tests in parallel)
        working-directory: cvc5
        run: |
          echo "Job ID: ${{ matrix.job_id }}"
          echo "Assigned tests: ${{ matrix.tests }}"
          
          # Function to run typefuzz on a single test
          run_fuzzer() {
            local test_path="$1"
            local test_name="$2"
            local process_id="$3"
            
            echo "Process $process_id: Starting fuzzing on $test_name"
            
            if [ -f "$test_path" ]; then
              echo "Process $process_id: Found test file: $test_path"
              
              # Run typefuzz for 5 minutes (300 seconds) with SIGKILL on timeout
              timeout -s 9 300 typefuzz "z3;./build/bin/cvc5" "$test_path" || {
                echo "Process $process_id: Fuzzing completed or timed out for $test_name"
              }
            else
              echo "Process $process_id: Test file not found: $test_path"
            fi
          }
          
          # Parse the tests array and run each test in parallel
          tests_array='${{ matrix.tests }}'
          echo "Tests array: $tests_array"
          
          # Extract individual tests from the array
          test1=$(echo "$tests_array" | jq -r '.[0]')
          test2=$(echo "$tests_array" | jq -r '.[1]')
          test3=$(echo "$tests_array" | jq -r '.[2]')
          test4=$(echo "$tests_array" | jq -r '.[3]')
          
          echo "Test 1: $test1"
          echo "Test 2: $test2"
          echo "Test 3: $test3"
          echo "Test 4: $test4"
          
          # Run all 4 tests in parallel
          if [ "$test1" != "null" ]; then
            run_fuzzer "test/regress/cli/$test1" "$test1" "1" &
          fi
          if [ "$test2" != "null" ]; then
            run_fuzzer "test/regress/cli/$test2" "$test2" "2" &
          fi
          if [ "$test3" != "null" ]; then
            run_fuzzer "test/regress/cli/$test3" "$test3" "3" &
          fi
          if [ "$test4" != "null" ]; then
            run_fuzzer "test/regress/cli/$test4" "$test4" "4" &
          fi
          
          # Wait for all background processes to complete
          echo "Waiting for all fuzzing processes to complete..."
          wait
          echo "All fuzzing processes completed for job ${{ matrix.job_id }}"
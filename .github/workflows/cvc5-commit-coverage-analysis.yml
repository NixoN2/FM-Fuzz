name: CVC5 Commit Coverage Analysis

on:
  workflow_dispatch:

jobs:
  commit-coverage-analysis:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
    
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      
      - name: Install LLVM/Clang 17
        uses: KyleMayes/install-llvm-action@v2
        with:
          version: '17'

      - name: Add LLVM to PATH
        run: echo "${{ env.LLVM_PATH }}/bin" >> $GITHUB_PATH

      - name: Export LIBCLANG_PATH
        run: echo "LIBCLANG_PATH=${{ env.LLVM_PATH }}/lib" >> $GITHUB_ENV

      - name: Install system development packages
        run: |
          echo "Installing essential development packages..."
          sudo apt-get update
          
          # Install ONLY GCC 14 and essential packages (remove conflicting versions)
          sudo apt-get install -y \
            build-essential \
            libc6-dev \
            gcc \
            g++ \
            binutils \
            libstdc++-14-dev \
            libc++-dev \
            libc++abi-dev \
            zlib1g \
            zlib1g-dev
          
          echo "Installation completed"
      
      - name: Install Python dependencies
        run: |
          pip install gitpython unidiff "libclang==17.0.6"

      - name: Build CVC5 with coverage
        run: |
          # Set environment variables to ensure clang uses GCC 14 toolchain
          export CXX="clang++ --gcc-toolchain=/usr"
          export CC="clang --gcc-toolchain=/usr"
          ./scripts/cvc5/build.sh --coverage
      
      - name: Download coverage mapping artifact from latest successful run
        uses: dawidd6/action-download-artifact@v3
        with:
          name: coverage-mapping-final
          path: .
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow: cvc5-coverage-analysis.yml
      
      - name: Extract coverage mapping
        run: |
          gunzip coverage_mapping_merged.json.gz
          ls -la coverage_mapping_merged.json

      - name: Run commit coverage analysis
        working-directory: cvc5
        run: ${{ github.workspace }}/scripts/cvc5/run_commit_coverage_analysis.sh 15 ${{ github.workspace }}/scripts/cvc5/commit_coverage_analyzer.py ../coverage_mapping_merged.json build
      
      # - name: Build signature dumper (LibTooling)
      #   working-directory: cvc5
      #   run: |
      #     # Copy the tool source into this repo workspace to build against compile_commands.json
      #     cp ${{ github.workspace }}/scripts/cvc5/sig_dump.cpp ./sig_dump.cpp
      #     # Build using installed LLVM/Clang with GCC 14 toolchain and proper include paths
      #     clang++ -std=c++17 --gcc-toolchain=/usr $(llvm-config --cxxflags) sig_dump.cpp -o sig_dump -L"$LLVM_PATH/lib" -Wl,-rpath,"$LLVM_PATH/lib" $(llvm-config --ldflags --system-libs --libs) -lclang-cpp

      # - name: Run signature dumper on changed files (HEAD)
      #   working-directory: cvc5
      #   run: |
      #     # Collect changed C/C++ files for HEAD commit in src/
      #     CHANGED=$(git show --name-only --pretty=format: HEAD | grep '^src/.*\.[ch]p\{0,2\}$' || true)
      #     if [ -n "$CHANGED" ]; then
      #       ./sig_dump -p build $CHANGED | head -200
      #     else
      #       echo "No changed C/C++ files in HEAD to dump signatures for."
      #     fi

name: CVC5 Commit Coverage Analysis

on:
  workflow_dispatch:

jobs:
  commit-coverage-analysis:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
    
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      
      - name: Install LLVM/Clang 17
        uses: KyleMayes/install-llvm-action@v2
        with:
          version: '17'

      - name: Add LLVM to PATH
        run: echo "${{ env.LLVM_PATH }}/bin" >> $GITHUB_PATH

      - name: Export LIBCLANG_PATH
        run: echo "LIBCLANG_PATH=${{ env.LLVM_PATH }}/lib" >> $GITHUB_ENV

      - name: Verify Clang
        run: |
          clang++ --version
          clang -print-resource-dir
          echo "=== Clang GCC Detection ==="
          clang++ -v 2>&1 | grep -E "(Found candidate|Selected)" || echo "No GCC detection info"
      
      - name: Install system development packages
        run: |
          echo "Installing essential development packages..."
          sudo apt-get update
          
          # Install comprehensive development packages for multiple GCC versions
          sudo apt-get install -y \
            build-essential \
            libc6-dev \
            gcc \
            g++ \
            libstdc++-14-dev \
            libstdc++-13-dev \
            libstdc++-12-dev \
            libstdc++-11-dev \
            libc++-dev \
            libc++abi-dev
          
          echo "Verifying installation..."
          echo "=== C Standard Library Headers ==="
          ls -la /usr/include/stdlib.h || echo "stdlib.h not found"
          ls -la /usr/include/stdio.h || echo "stdio.h not found"
          ls -la /usr/include/string.h || echo "string.h not found"
          
          echo "=== C++ Standard Library Headers ==="
          ls -la /usr/include/c++/14/iostream || echo "GCC 14 iostream not found"
          ls -la /usr/include/c++/13/iostream || echo "GCC 13 iostream not found"
          ls -la /usr/include/c++/12/iostream || echo "GCC 12 iostream not found"
          ls -la /usr/include/c++/11/iostream || echo "GCC 11 iostream not found"
          
          echo "=== Checking which GCC version clang will use ==="
          clang++ -v 2>&1 | grep -E "(Found candidate|Selected)" || echo "No GCC detection info"
          
          echo "=== Testing basic compilation ==="
          echo '#include <iostream>' | clang++ -x c++ - -v 2>&1 | grep -E "(search starts here|End of search list)" || echo "No include search info"
          
          echo "=== Installing specific GCC version if needed ==="
          # Extract the GCC version that clang is trying to use
          GCC_VERSION=$(clang++ -v 2>&1 | grep "Selected GCC installation" | sed 's/.*gcc\/x86_64-linux-gnu\///' | cut -d'/' -f1 || echo "")
          if [ -n "$GCC_VERSION" ]; then
            echo "Clang is trying to use GCC version: $GCC_VERSION"
            # Install the specific libstdc++ version if not already installed
            case "$GCC_VERSION" in
              "14")
                sudo apt-get install -y libstdc++-14-dev || echo "libstdc++-14-dev already installed or not available"
                ;;
              "13")
                sudo apt-get install -y libstdc++-13-dev || echo "libstdc++-13-dev already installed or not available"
                ;;
              "12")
                sudo apt-get install -y libstdc++-12-dev || echo "libstdc++-12-dev already installed or not available"
                ;;
              "11")
                sudo apt-get install -y libstdc++-11-dev || echo "libstdc++-11-dev already installed or not available"
                ;;
              *)
                echo "Unknown GCC version $GCC_VERSION, trying to install all versions"
                sudo apt-get install -y libstdc++-14-dev libstdc++-13-dev libstdc++-12-dev libstdc++-11-dev || true
                ;;
            esac
          else
            echo "Could not determine GCC version, installing all versions"
            sudo apt-get install -y libstdc++-14-dev libstdc++-13-dev libstdc++-12-dev libstdc++-11-dev || true
          fi
      
      - name: Install Python dependencies
        run: |
          pip install gitpython unidiff "libclang==17.0.6"

      - name: Verify libclang Python binding and library
        run: |
          python - <<'PY'
          import os
          from clang import cindex
          print('clang module:', cindex.__file__)
          print('LIBCLANG_PATH env:', os.environ.get('LIBCLANG_PATH'))
          # Force load from LIBCLANG_PATH if available
          libdir = os.environ.get('LIBCLANG_PATH')
          using = ''
          if libdir:
              import glob, os
              cands = sorted(glob.glob(os.path.join(libdir, 'libclang.so*')))
              print('libclang candidates:', cands[:5])
              if cands:
                  using = cands[0]
                  try:
                      cindex.Config.set_library_file(using)
                  except Exception as e:
                      print('set_library_file failed:', e)
          print('using libclang:', using or 'default loader')
          try:
              idx = cindex.Index.create()
              print('Index created:', bool(idx))
          except Exception as e:
              print('Index error:', e)
          PY

      - name: Locate system headers
        run: |
          echo "=== SYSTEM HEADER DISCOVERY ==="
          echo "Searching for essential C headers..."
          find /usr/include \( -name stdlib.h -o -name stdio.h -o -name string.h -o -name cstddef \) 2>/dev/null || true
          echo ""
          echo "Searching for C++ standard library headers..."
          find /usr/include \( -name iostream -o -name vector -o -name algorithm -o -name memory \) 2>/dev/null || true
          echo ""
          echo "Searching for GCC-specific headers..."
          find /usr/lib/gcc -name "*.h" 2>/dev/null || true
          echo ""
          echo "Clang resource directory and headers:"
          RDIR=$(clang -print-resource-dir 2>/dev/null) || true
          if [ -n "$RDIR" ] && [ -d "$RDIR/include" ]; then 
            echo "Resource dir: $RDIR"
            ls -la "$RDIR/include" || true
          else 
            echo "No resource include dir found"
          fi
          echo ""
          echo "g++ include search list:"
          echo | g++ -E -x c++ - -v 2>&1 | sed -n '/search starts here:/,/End of search list./p' || true
          echo ""
          echo "gcc include search list:"
          echo | gcc -E -x c - -v 2>&1 | sed -n '/search starts here:/,/End of search list./p' || true
          echo ""
          echo "Checking for development packages..."
          dpkg -l | grep -E "(libc6-dev|build-essential|g\+\+|libstdc\+\+)" || echo "No dev packages found via dpkg"
          echo ""
          echo "System include directories:"
          ls -la /usr/include/ || true
          echo ""
          echo "C++ include directories:"
          ls -la /usr/include/c++/ 2>/dev/null || echo "No C++ include directory found"
          echo ""
          echo "GCC version and paths:"
          gcc --version || true
          gcc -print-search-dirs 2>/dev/null || true

      - name: Test clang compilation
        run: |
          echo "=== TESTING CLANG COMPILATION ==="
          cat > test_compile.cpp << 'EOF'
          #include <stdlib.h>
          #include <iostream>
          #include <vector>
          #include <string>
          int main() { 
            std::vector<int> v;
            std::string s = "test";
            return 0; 
          }
          EOF
          
          echo "Testing basic clang++ compilation..."
          if clang++ -std=c++17 test_compile.cpp -o test_compile; then
            echo "✅ Basic compilation succeeded"
          else
            echo "❌ Basic compilation failed"
            echo "Trying with verbose output:"
            clang++ -std=c++17 -v test_compile.cpp -o test_compile 2>&1 | head -20
          fi
          
          echo "Testing clang++ with system includes..."
          if clang++ -std=c++17 -isystem /usr/include -isystem /usr/include/c++/14 -isystem /usr/include/c++/13 -isystem /usr/include/x86_64-linux-gnu test_compile.cpp -o test_compile_system; then
            echo "✅ System include compilation succeeded"
          else
            echo "❌ System include compilation failed"
          fi
          
          echo "Testing clang++ with GCC toolchain..."
          if clang++ -std=c++17 --gcc-toolchain=/usr test_compile.cpp -o test_compile_gcc; then
            echo "✅ GCC toolchain compilation succeeded"
          else
            echo "❌ GCC toolchain compilation failed"
          fi
          
          echo "Testing clang++ with libc++..."
          if clang++ -std=c++17 -stdlib=libc++ test_compile.cpp -o test_compile_libcxx; then
            echo "✅ libc++ compilation succeeded"
          else
            echo "❌ libc++ compilation failed"
          fi
          
          echo "Cleaning up test files..."
          rm -f test_compile test_compile_system test_compile_gcc test_compile_libcxx test_compile.cpp

      - name: Build CVC5 with coverage
        run: |
          ./scripts/cvc5/build.sh --coverage
      
      - name: Download coverage mapping artifact from latest successful run
        uses: dawidd6/action-download-artifact@v3
        with:
          name: coverage-mapping-final
          path: .
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow: cvc5-coverage-analysis.yml
      
      - name: Extract coverage mapping
        run: |
          gunzip coverage_mapping_merged.json.gz
          ls -la coverage_mapping_merged.json

      - name: Run commit coverage analysis
        working-directory: cvc5
        run: ${{ github.workspace }}/scripts/cvc5/run_commit_coverage_analysis.sh 15 ${{ github.workspace }}/scripts/cvc5/commit_coverage_analyzer.py ../coverage_mapping_merged.json

      - name: Build signature dumper (LibTooling)
        working-directory: cvc5
        run: |
          # Copy the tool source into this repo workspace to build against compile_commands.json
          cp ${{ github.workspace }}/scripts/cvc5/sig_dump.cpp ./sig_dump.cpp
          # Build using installed LLVM/Clang
          clang++ -std=c++17 $(llvm-config --cxxflags) sig_dump.cpp -o sig_dump -L"$LLVM_PATH/lib" -Wl,-rpath,"$LLVM_PATH/lib" $(llvm-config --ldflags --system-libs --libs) -lclang-cpp

      - name: Run signature dumper on changed files (HEAD)
        working-directory: cvc5
        run: |
          # Collect changed C/C++ files for HEAD commit in src/
          CHANGED=$(git show --name-only --pretty=format: HEAD | grep '^src/.*\.[ch]p\{0,2\}$' || true)
          if [ -n "$CHANGED" ]; then
            ./sig_dump -p build $CHANGED | head -200
          else
            echo "No changed C/C++ files in HEAD to dump signatures for."
          fi

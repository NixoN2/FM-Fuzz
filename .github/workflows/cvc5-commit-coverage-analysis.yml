name: CVC5 Commit Coverage Analysis

on:
  workflow_dispatch:

jobs:
  commit-coverage-analysis:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
    
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      
      - name: Install LLVM/Clang 17
        uses: KyleMayes/install-llvm-action@v2
        with:
          version: '17'

      - name: Add LLVM to PATH
        run: echo "${{ env.LLVM_PATH }}/bin" >> $GITHUB_PATH

      - name: Export LIBCLANG_PATH
        run: echo "LIBCLANG_PATH=${{ env.LLVM_PATH }}/lib" >> $GITHUB_ENV

      - name: Verify Clang
        run: |
          clang++ --version
          clang -print-resource-dir
      
      - name: Build CVC5 with coverage
        run: |
          ./scripts/cvc5/build.sh --coverage
      
      - name: Download coverage mapping artifact from latest successful run
        uses: dawidd6/action-download-artifact@v3
        with:
          name: coverage-mapping-final
          path: .
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow: cvc5-coverage-analysis.yml
      
      - name: Extract coverage mapping
        run: |
          gunzip coverage_mapping_merged.json.gz
          ls -la coverage_mapping_merged.json
      
      - name: Install Python dependencies
        run: |
          pip install gitpython unidiff "libclang==17.0.6"

      - name: Verify libclang Python binding and library
        run: |
          python - <<'PY'
          import os
          from clang import cindex
          print('clang module:', cindex.__file__)
          print('LIBCLANG_PATH env:', os.environ.get('LIBCLANG_PATH'))
          # Force load from LIBCLANG_PATH if available
          libdir = os.environ.get('LIBCLANG_PATH')
          using = ''
          if libdir:
              import glob, os
              cands = sorted(glob.glob(os.path.join(libdir, 'libclang.so*')))
              print('libclang candidates:', cands[:5])
              if cands:
                  using = cands[0]
                  try:
                      cindex.Config.set_library_file(using)
                  except Exception as e:
                      print('set_library_file failed:', e)
          print('using libclang:', using or 'default loader')
          try:
              idx = cindex.Index.create()
              print('Index created:', bool(idx))
          except Exception as e:
              print('Index error:', e)
          PY

      - name: Locate system headers
        run: |
          echo "Searching for stdlib.h and cstddef..."
          find /usr/include -maxdepth 4 \( -name stdlib.h -o -name cstddef \) 2>/dev/null | head -50 || true
          echo "Clang resource headers:"
          RDIR=$(clang -print-resource-dir 2>/dev/null) || true
          if [ -n "$RDIR" ] && [ -d "$RDIR/include" ]; then ls -la "$RDIR/include" | head -50; else echo "No resource include dir found"; fi
          echo "g++ include search list:" && echo | g++ -E -x c++ - -v 2>&1 | sed -n '/search starts here:/,/End of search list./p'
      
      - name: Run commit coverage analysis
        working-directory: cvc5
        run: ${{ github.workspace }}/scripts/cvc5/run_commit_coverage_analysis.sh 15 ${{ github.workspace }}/scripts/cvc5/commit_coverage_analyzer.py ../coverage_mapping_merged.json

      - name: Build signature dumper (LibTooling)
        working-directory: cvc5
        run: |
          # Copy the tool source into this repo workspace to build against compile_commands.json
          cp ${{ github.workspace }}/scripts/cvc5/sig_dump.cpp ./sig_dump.cpp
          # Build using installed LLVM/Clang
          clang++ -std=c++17 $(llvm-config --cxxflags) sig_dump.cpp -o sig_dump -L"$LLVM_PATH/lib" -Wl,-rpath,"$LLVM_PATH/lib" $(llvm-config --ldflags --system-libs --libs) -lclang-cpp

      - name: Run signature dumper on changed files (HEAD)
        working-directory: cvc5
        run: |
          # Collect changed C/C++ files for HEAD commit in src/
          CHANGED=$(git show --name-only --pretty=format: HEAD | grep '^src/.*\.[ch]p\{0,2\}$' || true)
          if [ -n "$CHANGED" ]; then
            ./sig_dump -p build $CHANGED | head -200
          else
            echo "No changed C/C++ files in HEAD to dump signatures for."
          fi
